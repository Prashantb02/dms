-- Create the Borrower table
CREATE TABLE Borrower (
    Roll_no INT PRIMARY KEY,
    Name VARCHAR(100),
    DateofIssue DATE,
    NameofBook VARCHAR(100),
    Status CHAR(1) -- 'I' for Issued, 'R' for Returned
);

-- Create the Fine table
CREATE TABLE Fine (
    Roll_no INT,
    Date DATE,
    Amt INT,
    FOREIGN KEY (Roll_no) REFERENCES Borrower(Roll_no) -- Linking to the Borrower table
);
-- Insert sample data into Borrower table
INSERT INTO Borrower (Roll_no, Name, DateofIssue, NameofBook, Status)
VALUES 
(101, 'Alice', '2023-10-01', 'Database Systems', 'I'),
(102, 'Bob', '2023-10-10', 'Operating Systems', 'I'),
(103, 'Charlie', '2023-10-15', 'Data Structures', 'I'),
(104, 'Daisy', '2023-09-01', 'Networks', 'R'), -- Already returned
(105, 'Eve', '2023-09-15', 'Algorithms', 'I');

-- Fine table is initially empty, as it will be populated by the stored procedure when fines are calculated.
-- Creating a simplified stored procedure to calculate fines

DELIMITER $$

CREATE PROCEDURE calculate_fine(IN in_roll_no INT, IN in_name_of_book VARCHAR(100))
BEGIN
    DECLARE v_date_of_issue DATE;
    DECLARE v_days INT;
    DECLARE v_fine_amt INT DEFAULT 0;

    -- Get the issue date and status of the book
    SELECT DateofIssue INTO v_date_of_issue
    FROM Borrower
    WHERE Roll_no = in_roll_no AND NameofBook = in_name_of_book AND Status = 'I';

    -- If the book is issued, calculate the fine
    IF v_date_of_issue IS NOT NULL THEN
        -- Calculate the number of days since the book was issued
        SET v_days = DATEDIFF(CURDATE(), v_date_of_issue);

        -- Calculate fine based on the number of days overdue
        IF v_days > 15 THEN
            IF v_days <= 30 THEN
                SET v_fine_amt = v_days * 5;
            ELSE
                SET v_fine_amt = (30 * 5) + ((v_days - 30) * 50);
            END IF;

            -- Insert fine details into Fine table
            INSERT INTO Fine (Roll_no, Date, Amt)
            VALUES (in_roll_no, CURDATE(), v_fine_amt);
        END IF;

        -- Mark the book as 'Returned'
        UPDATE Borrower
        SET Status = 'R'
        WHERE Roll_no = in_roll_no AND NameofBook = in_name_of_book;
    END IF;
END $$

DELIMITER ;

DELIMITER ;
-- Calculate fine for Alice's book 'Database Systems'
CALL calculate_fine(101, 'Database Systems');
